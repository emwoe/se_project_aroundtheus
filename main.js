!function(){"use strict";var e={498:function(e,t,r){e.exports=r.p+"f44d4bda95b365b93115.jpg"},460:function(e,t,r){e.exports=r.p+"70dde39c90b527ec62b2.jpg"},338:function(e,t,r){e.exports=r.p+"b3dd0fefea7f7de0e25b.jpg"},775:function(e,t,r){e.exports=r.p+"1c08a42a1ca45d1746f3.jpg"},291:function(e,t,r){e.exports=r.p+"b87c022f67fef0740657.jpg"},182:function(e,t,r){e.exports=r.p+"125bf2b043e25dddbfe2.jpg"}},t={};function r(s){var o=t[s];if(void 0!==o)return o.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,r),i.exports}r.m=e,r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r.b=document.baseURI||self.location.href,function(){new URL(r(460),r.b),new URL(r(291),r.b),new URL(r(182),r.b),new URL(r(775),r.b),new URL(r(338),r.b),new URL(r(498),r.b),Array.from(document.querySelectorAll(".form"));const e=document.querySelector(".modal_type_profile"),t=document.querySelector(".info__button"),s=(e.querySelector(".modal__close-button"),e.querySelector(".modal__container"),e.querySelector(".modal__save-button"),document.querySelector(".modal_type_new-image")),o=document.querySelector(".profile__button"),i=(s.querySelector(".modal__close-button"),s.querySelector(".modal__container")),n=(document.querySelector(".info__name"),document.querySelector("#name")),a=(document.querySelector(".info__job-title"),document.querySelector("#job-description")),l=document.querySelector(".profile__sheer-hover");document.querySelector(".modal_type_change-profile-picture").querySelector(".modal__container"),document.querySelector("#title"),document.querySelector("#image-link"),document.querySelectorAll(".card__image"),document.querySelector(".modal__wrapper_type_image-pop-out"),document.querySelector(".modal__close-button_type-image-pop-out"),document.querySelector(".card__pop-out_caption");class d{constructor(e,t,r,s,o){this._cardSelector=t,this.data=e,this._handleImageClick=r,this._handleDeleteBtn=s,this._handleLikeBtn=o}_getTemplate(){return this._cardTemplate=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardTemplate}generateCard(){return this._cardElement=this._getTemplate(),this._cardHeart=this._cardElement.querySelector(".card__heart"),this._setEventListeners(),this._cardElement.querySelector(".card__name").textContent=this.data.name,this._cardElement.querySelector(".card__image").src=this.data.link,this._cardElement.querySelector(".card__image").alt=this.data.name,1==this.data.isLiked?this._cardHeart.classList.add("card__heart-option-liked"):this._cardHeart.classList.remove("card__heart-option-liked"),this._cardElement}getID(){return this.data._id}_setEventListeners(){const e=this._cardElement.querySelector(".card__delete-btn");this._cardHeart.addEventListener("click",(()=>{this._handleLikeBtn(this)})),e.addEventListener("click",(()=>{this._handleDeleteBtn(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick(this)}))}toggleHeart(){this._cardHeart.classList.toggle("card__heart-option-liked")}deleteCard(){console.log(this),this._cardElement.remove()}}class c{constructor(e,t){this._validationConfig=e,this._form=t,this._inputList=Array.from(this._form.querySelectorAll(this._validationConfig.inputSelector)),this._buttonElement=this._form.querySelector(this._validationConfig.submitButtonSelector)}_disableButton(){this._buttonElement.classList.add(this._validationConfig.inactiveButtonClass),this._buttonElement.disabled=!0}_enableButton(){this._buttonElement.classList.remove(this._validationConfig.inactiveButtonClass),this._buttonElement.disabled=!1}toggleButtonState(){this._hasInvalidInput(this._inputList)?this._disableButton():this._enableButton()}_setEventListeners(){this._disableButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{console.log("Input made!"),console.log(e),this._checkInputValidity(e),this.toggleButtonState()}))}))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e,this._form,this._validationConfig):this._showInputError(e,this._form,e.validationMessage,this._validationConfig)}_showInputError(e,t,r,s){this._errorElement=this._form.querySelector(`.${e.id}${this._validationConfig.errorMessageSelectorSuffix}`),e.classList.add(this._validationConfig.inputErrorClass),this._errorElement.textContent=r,this._errorElement.classList.add(this._validationConfig.errorClass)}_hideInputError(e,t,r){e.classList.remove(this._validationConfig.inputErrorClass),this._errorElement=this._form.querySelector(`.${e.id}${this._validationConfig.errorMessageSelectorSuffix}`),this._errorElement.classList.remove(this._validationConfig.errorClass),this._errorElement.textContent=""}resetValidation(){this._disableButton(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class u{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._element=this._renderer(e),this.addItem(this._element)}))}addItem(e){this._container.prepend(e)}}class _{constructor(e){let{popupSelector:t}=e;this._popupModal=document.querySelector(t),this._popupModalCloseBtn=this._popupModal.querySelector(".modal__close-button"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._addEscEventListener(),this._popupModal.classList.add("modal_opened")}close(){this._popupModal.classList.remove("modal_opened"),this._removeEscEventListener()}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleRemoteClick(e){e.target===e.currentTarget&&(console.log(e.target),this.close())}setEventListeners(){this._popupModalCloseBtn.addEventListener("click",(()=>{this.close()})),this._popupModal.addEventListener("click",this._handleRemoteClick.bind(this))}_addEscEventListener(){document.addEventListener("keydown",this._handleEscClose,!1),console.log("Listener added!")}_removeEscEventListener(){document.removeEventListener("keydown",this._handleEscClose,!1),console.log("Listener removed!")}}class h extends _{constructor(e){let{popupSelector:t,handleFormSubmit:r,buttonText:s}=e;super({popupSelector:t}),this._handleFormSubmit=r,this._buttonText=s,this._modalForm=this._popupModal.querySelector(".modal__container"),this._modalInputs=this._popupModal.querySelectorAll(".modal__input"),this._submitBtn=this._modalForm.querySelector(".modal__save-button"),this.submitBtnText=this._submitBtn.textContent}_getInputValues(){const e={};return this._modalInputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this.renderSaving(!0),this._handleFormSubmit(t)})),super.setEventListeners()}renderSaving(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtnText=e?t:this._buttonText}}let p,m,v;const f=new class{constructor(e){let{apiAddress:t,apiHeaders:r}=e;this._apiAddress=t,this._apiHeaders=r}_serverRequest(e,t){return fetch(e,t).then(this.renderResult)}renderResult(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return this._serverRequest(`${this._apiAddress}/cards`,{headers:this._apiHeaders})}fetchUserInfo(){return this._serverRequest(`${this._apiAddress}/users/me`,{headers:this._apiHeaders})}editUserInfo(e){return this._serverRequest(`${this._apiAddress}/users/me`,{method:"PATCH",headers:this._apiHeaders,body:JSON.stringify({name:e.name,about:e.job})})}editUserProfilePicture(e){return this._serverRequest(`${this._apiAddress}/users/me/avatar`,{method:"PATCH",headers:this._apiHeaders,body:JSON.stringify({avatar:e.avatar})})}addNewCard(e){return this._serverRequest(`${this._apiAddress}/cards`,{method:"POST",headers:this._apiHeaders,body:JSON.stringify({name:e.name,link:e.link})})}deleteCard(e){return this._serverRequest(`${this._apiAddress}/cards/${e}`,{method:"DELETE",headers:this._apiHeaders})}addLike(e){return this._serverRequest(`${this._apiAddress}/cards/${e}/likes`,{method:"PUT",headers:this._apiHeaders})}removeLike(e){return this._serverRequest(`${this._apiAddress}/cards/${e}/likes`,{method:"DELETE",headers:this._apiHeaders})}checkCardsStatus(){return this._serverRequest(`${this._apiAddress}/cards`,{headers:this._apiHeaders})}loadPageResults(){return Promise.all([this.getInitialCards(),this.fetchUserInfo()])}}({apiAddress:"https://around-api.en.tripleten-services.com/v1",apiHeaders:{authorization:"34ba410c-a4f9-4189-8d1e-4545749c88e4","Content-Type":"application/json"}}),S=new class{constructor(e){let{userNameSelector:t,userJobSelector:r,profilePictureSelector:s}=e;this._userNameSelector=t,this._userJobSelector=r,this._userName=document.querySelector(t),this._userJob=document.querySelector(r),this._userProfilePicture=document.querySelector(s)}getUserInfo(){return{name:this._userName.textContent,job:this._userJob.textContent}}getUserPictureLink(){return{avatar:this._userProfilePicture.src}}setUserInfo(e){this._userName.textContent=e.name,this._userJob.textContent=e.job}setUserPicture(e){this._userProfilePicture.src=e.avatar}}({userNameSelector:".info__name",userJobSelector:".info__job-title",profilePictureSelector:".profile__circle"});function g(e){return new d(e,"#localeCard",x,y,L).generateCard()}f.loadPageResults().then((e=>{let[t,r]=e;m=new u({items:t,renderer:g},".elements"),m.renderItems(),console.log(r),S.setUserInfo({name:r.name,job:r.about}),S.setUserPicture({avatar:r.avatar})})).catch((e=>{console.error(e)}));const b=new class extends _{constructor(e){let{popupSelector:t,imageSelector:r}=e;super({popupSelector:t}),this._popupModalImage=this._popupModal.querySelector(r),this._popupModalCaption=this._popupModal.querySelector(".card__pop-out_caption")}open(e,t){this._popupModalImage.src=t,this._popupModalImage.alt=e,this._popupModalCaption.textContent=e,super.open()}}({popupSelector:".modal_type_image-pop-out",imageSelector:".card__image_option_pop-out"});b.setEventListeners();const E=new class extends _{constructor({popupSelector:e,handleBtnClick:t,buttonText:r}){super({popupSelector:e}),this._buttonText=r,this._handleBtnClick=t,this._modalForm=this._popupModal.querySelector(".modal__container"),this._submitBtn=this._modalForm.querySelector(".modal__save-button"),this.submitBtnText=this._submitBtn.textContent}setEventListeners(){this._submitBtn.addEventListener("click",(e=>{e.preventDefault(),this.renderSaving(!0),this._handleBtnClick()})),super.setEventListeners()}renderSaving(e,t="Deleting..."){this._submitBtnText=e?t:this._buttonText}}({popupSelector:".modal_type_delete-image",handleBtnClick:()=>{f.deleteCard(p.data._id).then((()=>p.deleteCard())).then((()=>E.close())).catch((e=>{console.error(e)})).finally((()=>E.renderSaving(!1)))},buttonText:"Yes"});function y(e){return console.log(e),E.open(),p=e,p}function L(e){v=e.getID(),0==e.data.isLiked?f.addLike(v).then(e.data.isLiked=!0).then((()=>e.toggleHeart())).catch((e=>{console.error(e)})):f.removeLike(v).then(e.data.isLiked=!1).then((()=>e.toggleHeart())).catch((e=>{console.error(e)}))}E.setEventListeners(),t.addEventListener("click",(()=>{C.open();const e=S.getUserInfo();console.log(e),n.value=e.name,a.value=e.job,B.editProfile.resetValidation})),l.addEventListener("click",(()=>{q.open()})),o.addEventListener("click",(()=>{k.open()}));const C=new h({popupSelector:".modal_type_profile",handleFormSubmit:function(e){I((function(){return f.editUserInfo(e).then((e=>{S.setUserInfo({name:e.name,job:e.about})}))}),C)},buttonText:"Save"}),q=new h({popupSelector:".modal_type_change-profile-picture",handleFormSubmit:function(e){I((function(){return f.editUserProfilePicture(e).then((e=>{S.setUserPicture({avatar:e.avatar})}))}),q)},buttonText:"Save"}),k=new h({popupSelector:".modal_type_new-image",handleFormSubmit:function(e){I((function(){return f.addNewCard(e).then((e=>g(e))).then((e=>m.addItem(e))).then((()=>i.reset())).then((()=>B.newPlace.toggleButtonState()))}),k)},buttonText:"Create"});function x(e){b.open(e.data.name,e.data.link)}function I(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderSaving(!0,r),e().then((()=>{t.close()})).catch((e=>console.log(e))).finally((()=>{t.renderSaving(!1)}))}C.setEventListeners(),k.setEventListeners(),q.setEventListeners();const B={};var w;w={formSelector:".form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active",errorMessageSelectorSuffix:"-input-error"},Array.from(document.querySelectorAll(w.formSelector)).forEach((e=>{const t=new c(w,e),r=e.getAttribute("name");B[r]=t,t.enableValidation()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixnQk1xTFg3RSxNQUFNQyxLQUNyQlAsU0FBU1EsaUJBQWlCaUQsRUFBaUJ5SyxlQUVwQzNKLFNBQVNlLElBQ2hCLE1BQU02SSxFQUFZLElBQUkzSyxFQUFjQyxFQUFrQjZCLEdBQ2hEOEksRUFBVzlJLEVBQVkrSSxhQUFhLFFBQzFDWixFQUFlVyxHQUFZRCxFQUMzQkEsRUFBVTNJLGtCQUFrQixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBEZWxldGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJleHBvcnQgY29uc3QgQXVzdGluSW1hZ2UgPSBuZXcgVVJMKFxuICBcIi4uL2ltYWdlcy9jYXJkLWltYWdlcy9BdXN0aW4uanBnXCIsXG4gIGltcG9ydC5tZXRhLnVybFxuKTtcbmV4cG9ydCBjb25zdCBOWUNJbWFnZSA9IG5ldyBVUkwoXG4gIFwiLi4vaW1hZ2VzL2NhcmQtaW1hZ2VzL05ld1lvcmsuanBnXCIsXG4gIGltcG9ydC5tZXRhLnVybFxuKTtcbmV4cG9ydCBjb25zdCBTYW5GcmFuSW1hZ2UgPSBuZXcgVVJMKFxuICBcIi4uL2ltYWdlcy9jYXJkLWltYWdlcy9TYW5GcmFuLmpwZ1wiLFxuICBpbXBvcnQubWV0YS51cmxcbik7XG5leHBvcnQgY29uc3QgS0NpdHlJbWFnZSA9IG5ldyBVUkwoXG4gIFwiLi4vaW1hZ2VzL2NhcmQtaW1hZ2VzL0thbnNhc0NpdHkuanBnXCIsXG4gIGltcG9ydC5tZXRhLnVybFxuKTtcbmV4cG9ydCBjb25zdCBDaGljYWdvSW1hZ2UgPSBuZXcgVVJMKFxuICBcIi4uL2ltYWdlcy9jYXJkLWltYWdlcy9DaGljYWdvLmpwZ1wiLFxuICBpbXBvcnQubWV0YS51cmxcbik7XG5leHBvcnQgY29uc3QgQVRMSW1hZ2UgPSBuZXcgVVJMKFxuICBcIi4uL2ltYWdlcy9jYXJkLWltYWdlcy9BdGxhbnRhLmpwZ1wiLFxuICBpbXBvcnQubWV0YS51cmxcbik7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsQ2FyZHMgPSBbXG4gIHtcbiAgICBuYW1lOiBcIkF1c3RpblwiLFxuICAgIGxpbms6IEF1c3RpbkltYWdlLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOZXcgWW9ya1wiLFxuICAgIGxpbms6IE5ZQ0ltYWdlLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTYW4gRnJhbmNpc2NvXCIsXG4gICAgbGluazogU2FuRnJhbkltYWdlLFxuICB9LFxuXG4gIHtcbiAgICBuYW1lOiBcIkthbnNhcyBDaXR5XCIsXG4gICAgbGluazogS0NpdHlJbWFnZSxcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQ2hpY2Fnb1wiLFxuICAgIGxpbms6IENoaWNhZ29JbWFnZSxcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQXRsYW50YVwiLFxuICAgIGxpbms6IEFUTEltYWdlLFxuICB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRpb25Db25maWcgPSB7XG4gIGZvcm1TZWxlY3RvcjogXCIuZm9ybVwiLFxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19zYXZlLWJ1dHRvblwiLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25faW5hY3RpdmVcIixcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0LWVycm9yX2FjdGl2ZVwiLFxuICBlcnJvck1lc3NhZ2VTZWxlY3RvclN1ZmZpeDogXCItaW5wdXQtZXJyb3JcIixcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5mb3JtXCIpKTtcbmV4cG9ydCBjb25zdCBtb2RhbFByb2ZpbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX3R5cGVfcHJvZmlsZVwiKTtcbmV4cG9ydCBjb25zdCBtb2RhbFByb2ZpbGVFZGl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbmZvX19idXR0b25cIik7XG5leHBvcnQgY29uc3QgbW9kYWxQcm9maWxlQ2xvc2VCdG4gPSBtb2RhbFByb2ZpbGUucXVlcnlTZWxlY3RvcihcbiAgXCIubW9kYWxfX2Nsb3NlLWJ1dHRvblwiXG4pO1xuZXhwb3J0IGNvbnN0IG1vZGFsUHJvZmlsZUZvcm0gPSBtb2RhbFByb2ZpbGUucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY29udGFpbmVyXCIpO1xuZXhwb3J0IGNvbnN0IG1vZGFsUHJvZmlsZVNhdmVCdG4gPSBtb2RhbFByb2ZpbGUucXVlcnlTZWxlY3RvcihcbiAgXCIubW9kYWxfX3NhdmUtYnV0dG9uXCJcbik7XG5cbmV4cG9ydCBjb25zdCBtb2RhbEltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF90eXBlX25ldy1pbWFnZVwiKTtcbmV4cG9ydCBjb25zdCBtb2RhbEltYWdlRWRpdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYnV0dG9uXCIpO1xuZXhwb3J0IGNvbnN0IG1vZGFsSW1hZ2VDbG9zZUJ0biA9IG1vZGFsSW1hZ2UucXVlcnlTZWxlY3RvcihcbiAgXCIubW9kYWxfX2Nsb3NlLWJ1dHRvblwiXG4pO1xuZXhwb3J0IGNvbnN0IG1vZGFsSW1hZ2VGb3JtID0gbW9kYWxJbWFnZS5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jb250YWluZXJcIik7XG5cbmV4cG9ydCBjb25zdCBwcm9maWxlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb19fbmFtZVwiKTtcbmV4cG9ydCBjb25zdCBtb2RhbE5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hbWVcIik7XG5leHBvcnQgY29uc3QgcHJvZmlsZUpvYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb19fam9iLXRpdGxlXCIpO1xuZXhwb3J0IGNvbnN0IG1vZGFsSm9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNqb2ItZGVzY3JpcHRpb25cIik7XG5leHBvcnQgY29uc3QgbmV3UHJvZmlsZUltYWdlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgXCIucHJvZmlsZV9fc2hlZXItaG92ZXJcIlxuKTtcbmV4cG9ydCBjb25zdCBtb2RhbE5ld1BpY3R1cmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5tb2RhbF90eXBlX2NoYW5nZS1wcm9maWxlLXBpY3R1cmVcIlxuKTtcbmV4cG9ydCBjb25zdCBuZXdQcm9maWxlUGljdHVyZUZvcm0gPVxuICBtb2RhbE5ld1BpY3R1cmUucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY29udGFpbmVyXCIpO1xuXG5leHBvcnQgY29uc3QgbW9kYWxJbWFnZVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0aXRsZVwiKTtcbmV4cG9ydCBjb25zdCBtb2RhbEltYWdlTGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaW1hZ2UtbGlua1wiKTtcblxuZXhwb3J0IGNvbnN0IGNhcmRJbWFnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNhcmRfX2ltYWdlXCIpO1xuXG5leHBvcnQgY29uc3QgY2FyZEltYWdlUG9wT3V0V3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLm1vZGFsX193cmFwcGVyX3R5cGVfaW1hZ2UtcG9wLW91dFwiXG4pO1xuZXhwb3J0IGNvbnN0IGNhcmRJbWFnZVBvcE91dENsb3NlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgXCIubW9kYWxfX2Nsb3NlLWJ1dHRvbl90eXBlLWltYWdlLXBvcC1vdXRcIlxuKTtcbmV4cG9ydCBjb25zdCBjYXJkSW1hZ2VQb3BPdXRDYXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgXCIuY2FyZF9fcG9wLW91dF9jYXB0aW9uXCJcbik7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcbiAgY29uc3RydWN0b3IoXG4gICAgZGF0YSxcbiAgICBjYXJkU2VsZWN0b3IsXG4gICAgaGFuZGxlSW1hZ2VDbGljayxcbiAgICBoYW5kbGVEZWxldGVCdG4sXG4gICAgaGFuZGxlTGlrZUJ0blxuICApIHtcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVCdG4gPSBoYW5kbGVEZWxldGVCdG47XG4gICAgdGhpcy5faGFuZGxlTGlrZUJ0biA9IGhhbmRsZUxpa2VCdG47XG4gIH1cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIHRoaXMuX2NhcmRUZW1wbGF0ZSA9IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXMuX2NhcmRUZW1wbGF0ZTtcbiAgfVxuXG4gIGdlbmVyYXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XG4gICAgdGhpcy5fY2FyZEhlYXJ0ID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19oZWFydFwiKTtcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbmFtZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuZGF0YS5uYW1lO1xuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIikuc3JjID0gdGhpcy5kYXRhLmxpbms7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKS5hbHQgPSB0aGlzLmRhdGEubmFtZTtcbiAgICBpZiAodGhpcy5kYXRhLmlzTGlrZWQgPT0gdHJ1ZSkge1xuICAgICAgdGhpcy5fY2FyZEhlYXJ0LmNsYXNzTGlzdC5hZGQoXCJjYXJkX19oZWFydC1vcHRpb24tbGlrZWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NhcmRIZWFydC5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZF9faGVhcnQtb3B0aW9uLWxpa2VkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcbiAgfVxuXG4gIGdldElEKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuX2lkO1xuICB9XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGNhcmREZWxldGVCdG4gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idG5cIik7XG5cbiAgICB0aGlzLl9jYXJkSGVhcnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUxpa2VCdG4odGhpcyk7XG4gICAgfSk7XG5cbiAgICBjYXJkRGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVCdG4odGhpcyk7XG4gICAgfSk7XG4gICAgY29uc3QgY2FyZEltYWdlRWxlbWVudCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XG4gICAgY2FyZEltYWdlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh0aGlzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRvZ2dsZUhlYXJ0KCkge1xuICAgIHRoaXMuX2NhcmRIZWFydC5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9faGVhcnQtb3B0aW9uLWxpa2VkXCIpO1xuICB9XG5cbiAgZGVsZXRlQ2FyZCgpIHtcbiAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKHZhbGlkYXRpb25Db25maWcsIGZvcm0pIHtcbiAgICB0aGlzLl92YWxpZGF0aW9uQ29uZmlnID0gdmFsaWRhdGlvbkNvbmZpZztcbiAgICB0aGlzLl9mb3JtID0gZm9ybTtcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3ZhbGlkYXRpb25Db25maWcuaW5wdXRTZWxlY3RvcilcbiAgICApO1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICB0aGlzLl92YWxpZGF0aW9uQ29uZmlnLnN1Ym1pdEJ1dHRvblNlbGVjdG9yXG4gICAgKTtcbiAgfVxuXG4gIF9kaXNhYmxlQnV0dG9uKCkge1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChcbiAgICAgIHRoaXMuX3ZhbGlkYXRpb25Db25maWcuaW5hY3RpdmVCdXR0b25DbGFzc1xuICAgICk7XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gIH1cblxuICBfZW5hYmxlQnV0dG9uKCkge1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgIHRoaXMuX3ZhbGlkYXRpb25Db25maWcuaW5hY3RpdmVCdXR0b25DbGFzc1xuICAgICk7XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCh0aGlzLl9pbnB1dExpc3QpKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlQnV0dG9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VuYWJsZUJ1dHRvbigpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9kaXNhYmxlQnV0dG9uKCk7XG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSW5wdXQgbWFkZSFcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKGlucHV0RWxlbWVudCk7XG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xuXG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XG4gICAgfSk7XG4gIH1cblxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihcbiAgICAgICAgaW5wdXRFbGVtZW50LFxuICAgICAgICB0aGlzLl9mb3JtLFxuICAgICAgICBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UsXG4gICAgICAgIHRoaXMuX3ZhbGlkYXRpb25Db25maWdcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgdGhpcy5fZm9ybSwgdGhpcy5fdmFsaWRhdGlvbkNvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgZm9ybSwgZXJyb3JNZXNzYWdlLCB2YWxpZGF0aW9uQ29uZmlnKSB7XG4gICAgdGhpcy5fZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgYC4ke2lucHV0RWxlbWVudC5pZH0ke3RoaXMuX3ZhbGlkYXRpb25Db25maWcuZXJyb3JNZXNzYWdlU2VsZWN0b3JTdWZmaXh9YFxuICAgICk7XG5cbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl92YWxpZGF0aW9uQ29uZmlnLmlucHV0RXJyb3JDbGFzcyk7XG4gICAgdGhpcy5fZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xuICAgIHRoaXMuX2Vycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3ZhbGlkYXRpb25Db25maWcuZXJyb3JDbGFzcyk7XG4gIH1cblxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBmb3JtRWxlbWVudCwgdmFsaWRhdGlvbkNvbmZpZykge1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3ZhbGlkYXRpb25Db25maWcuaW5wdXRFcnJvckNsYXNzKTtcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgLiR7aW5wdXRFbGVtZW50LmlkfSR7dGhpcy5fdmFsaWRhdGlvbkNvbmZpZy5lcnJvck1lc3NhZ2VTZWxlY3RvclN1ZmZpeH1gXG4gICAgKTtcbiAgICB0aGlzLl9lcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl92YWxpZGF0aW9uQ29uZmlnLmVycm9yQ2xhc3MpO1xuICAgIHRoaXMuX2Vycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH1cblxuICByZXNldFZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5fZGlzYWJsZUJ1dHRvbigpO1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgfSk7XG4gIH1cblxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XG4gIH1cbiAgcmVuZGVySXRlbXMoKSB7XG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xuICAgICAgdGhpcy5hZGRJdGVtKHRoaXMuX2VsZW1lbnQpO1xuICAgIH0pO1xuICB9XG4gIGFkZEl0ZW0oZWxlbWVudCkge1xuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XG4gICAgdGhpcy5fcG9wdXBNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fcG9wdXBNb2RhbENsb3NlQnRuID0gdGhpcy5fcG9wdXBNb2RhbC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIubW9kYWxfX2Nsb3NlLWJ1dHRvblwiXG4gICAgKTtcbiAgICB0aGlzLl9oYW5kbGVFc2NDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMuX2FkZEVzY0V2ZW50TGlzdGVuZXIoKTtcbiAgICB0aGlzLl9wb3B1cE1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9wb3B1cE1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XG4gICAgdGhpcy5fcmVtb3ZlRXNjRXZlbnRMaXN0ZW5lcigpO1xuICB9XG5cbiAgX2hhbmRsZUVzY0Nsb3NlKGV2dCkge1xuICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZVJlbW90ZUNsaWNrKGV2dCkge1xuICAgIGlmIChldnQudGFyZ2V0ID09PSBldnQuY3VycmVudFRhcmdldCkge1xuICAgICAgY29uc29sZS5sb2coZXZ0LnRhcmdldCk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fcG9wdXBNb2RhbENsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSk7XG4gICAgdGhpcy5fcG9wdXBNb2RhbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJjbGlja1wiLFxuICAgICAgdGhpcy5faGFuZGxlUmVtb3RlQ2xpY2suYmluZCh0aGlzKVxuICAgICk7XG4gIH1cblxuICBfYWRkRXNjRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSwgZmFsc2UpO1xuICAgIGNvbnNvbGUubG9nKFwiTGlzdGVuZXIgYWRkZWQhXCIpO1xuICB9XG4gIF9yZW1vdmVFc2NFdmVudExpc3RlbmVyKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlLCBmYWxzZSk7XG4gICAgY29uc29sZS5sb2coXCJMaXN0ZW5lciByZW1vdmVkIVwiKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5pbXBvcnQgeyBtb2RhbEltYWdlVGl0bGUsIG1vZGFsSW1hZ2VMaW5rIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQsIGJ1dHRvblRleHQgfSkge1xuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgICB0aGlzLl9idXR0b25UZXh0ID0gYnV0dG9uVGV4dDtcbiAgICB0aGlzLl9tb2RhbEZvcm0gPSB0aGlzLl9wb3B1cE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2NvbnRhaW5lclwiKTtcbiAgICB0aGlzLl9tb2RhbElucHV0cyA9IHRoaXMuX3BvcHVwTW9kYWwucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIik7XG4gICAgdGhpcy5fc3VibWl0QnRuID0gdGhpcy5fbW9kYWxGb3JtLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3NhdmUtYnV0dG9uXCIpO1xuICAgIHRoaXMuc3VibWl0QnRuVGV4dCA9IHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudDtcbiAgfVxuXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICBjb25zdCBmb3JtVmFsdWVzID0ge307XG4gICAgdGhpcy5fbW9kYWxJbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIGZvcm1WYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9ybVZhbHVlcztcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX21vZGFsRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xuICAgICAgdGhpcy5yZW5kZXJTYXZpbmcodHJ1ZSk7XG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KGlucHV0VmFsdWVzKTtcbiAgICB9KTtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcmVuZGVyU2F2aW5nKGlzU2F2aW5nLCBzYXZpbmdUZXh0ID0gXCJTYXZpbmcuLi5cIikge1xuICAgIGlmIChpc1NhdmluZykge1xuICAgICAgdGhpcy5fc3VibWl0QnRuVGV4dCA9IHNhdmluZ1RleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ0blRleHQgPSB0aGlzLl9idXR0b25UZXh0O1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcbmltcG9ydCB7XG4gIEF1c3RpbkltYWdlLFxuICBOWUNJbWFnZSxcbiAgU2FuRnJhbkltYWdlLFxuICBLQ2l0eUltYWdlLFxuICBDaGljYWdvSW1hZ2UsXG4gIEFUTEltYWdlLFxuICBpbml0aWFsQ2FyZHMsXG4gIHZhbGlkYXRpb25Db25maWcsXG4gIG1vZGFsUHJvZmlsZUVkaXRCdG4sXG4gIG1vZGFsUHJvZmlsZUZvcm0sXG4gIG1vZGFsUHJvZmlsZVNhdmVCdG4sXG4gIG1vZGFsSW1hZ2VFZGl0QnRuLFxuICBtb2RhbEltYWdlRm9ybSxcbiAgbW9kYWxOYW1lLFxuICBtb2RhbEpvYixcbiAgbW9kYWxJbWFnZVRpdGxlLFxuICBtb2RhbEltYWdlTGluayxcbiAgbmV3UHJvZmlsZUltYWdlQnRuLFxuICBtb2RhbE5ld1BpY3R1cmUsXG4gIG5ld1Byb2ZpbGVQaWN0dXJlRm9ybSxcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoRGVsZXRlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwRGVsZXRlXCI7XG5cbmxldCBjYXJkVG9EZWxldGU7XG5sZXQgcmVhZHlUb0RlbGV0ZTtcbmxldCBjYXJkQXJlYTtcbmxldCBsaWtlZENhcmQ7XG5sZXQgY2FyZElEO1xuXG4vL0dldCBpbml0aWFsIGNhcmRzIGFuZCB1c2VyIGluZm8gZnJvbSBzZXJ2ZXJcblxuY29uc3QgYXBpID0gbmV3IEFwaSh7XG4gIGFwaUFkZHJlc3M6IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIixcbiAgYXBpSGVhZGVyczoge1xuICAgIGF1dGhvcml6YXRpb246IFwiMzRiYTQxMGMtYTRmOS00MTg5LThkMWUtNDU0NTc0OWM4OGU0XCIsXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gIH0sXG59KTtcblxuY29uc3QgbmV3VXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICB1c2VyTmFtZVNlbGVjdG9yOiBcIi5pbmZvX19uYW1lXCIsXG4gIHVzZXJKb2JTZWxlY3RvcjogXCIuaW5mb19fam9iLXRpdGxlXCIsXG4gIHByb2ZpbGVQaWN0dXJlU2VsZWN0b3I6IFwiLnByb2ZpbGVfX2NpcmNsZVwiLFxufSk7XG5cbmFwaVxuICAubG9hZFBhZ2VSZXN1bHRzKClcbiAgLnRoZW4oKFtjYXJkcywgdXNlckRhdGFdKSA9PiB7XG4gICAgY2FyZEFyZWEgPSBuZXcgU2VjdGlvbih7IGl0ZW1zOiBjYXJkcywgcmVuZGVyZXI6IGNyZWF0ZUNhcmQgfSwgXCIuZWxlbWVudHNcIik7XG4gICAgY2FyZEFyZWEucmVuZGVySXRlbXMoKTtcbiAgICBjb25zb2xlLmxvZyh1c2VyRGF0YSk7XG4gICAgbmV3VXNlckluZm8uc2V0VXNlckluZm8oe1xuICAgICAgbmFtZTogdXNlckRhdGEubmFtZSxcbiAgICAgIGpvYjogdXNlckRhdGEuYWJvdXQsXG4gICAgfSk7XG4gICAgbmV3VXNlckluZm8uc2V0VXNlclBpY3R1cmUoeyBhdmF0YXI6IHVzZXJEYXRhLmF2YXRhciB9KTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0pO1xuXG4vL0NyZWF0ZSBjYXJkcyBhbmQgaGFuZGxlIHRoZWlyIGxpa2UgYW5kIGRlbGV0ZSBidXR0b25zXG5cbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoaXRlbSkge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgaXRlbSxcbiAgICBcIiNsb2NhbGVDYXJkXCIsXG4gICAgb3Blbk1vZGFsSW1hZ2UsXG4gICAgaGFuZGxlRGVsZXRlQ2xpY2ssXG4gICAgaGFuZGxlTGlrZVxuICApO1xuICByZXR1cm4gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcbn1cblxuY29uc3QgY2FyZFBvcE91dCA9IG5ldyBQb3B1cFdpdGhJbWFnZSh7XG4gIHBvcHVwU2VsZWN0b3I6IFwiLm1vZGFsX3R5cGVfaW1hZ2UtcG9wLW91dFwiLFxuICBpbWFnZVNlbGVjdG9yOiBcIi5jYXJkX19pbWFnZV9vcHRpb25fcG9wLW91dFwiLFxufSk7XG5cbmNhcmRQb3BPdXQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgZGVsZXRlQ2FyZE1vZGFsID0gbmV3IFBvcHVwV2l0aERlbGV0ZSh7XG4gIHBvcHVwU2VsZWN0b3I6IFwiLm1vZGFsX3R5cGVfZGVsZXRlLWltYWdlXCIsXG4gIGhhbmRsZUJ0bkNsaWNrOiAoKSA9PiB7XG4gICAgYXBpXG4gICAgICAuZGVsZXRlQ2FyZChjYXJkVG9EZWxldGUuZGF0YS5faWQpXG4gICAgICAudGhlbigoKSA9PiBjYXJkVG9EZWxldGUuZGVsZXRlQ2FyZCgpKVxuICAgICAgLnRoZW4oKCkgPT4gZGVsZXRlQ2FyZE1vZGFsLmNsb3NlKCkpXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4gZGVsZXRlQ2FyZE1vZGFsLnJlbmRlclNhdmluZyhmYWxzZSkpO1xuICB9LFxuICBidXR0b25UZXh0OiBcIlllc1wiLFxufSk7XG5cbmRlbGV0ZUNhcmRNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVDbGljayhjYXJkKSB7XG4gIGNvbnNvbGUubG9nKGNhcmQpO1xuICBkZWxldGVDYXJkTW9kYWwub3BlbigpO1xuICBjYXJkVG9EZWxldGUgPSBjYXJkO1xuICByZXR1cm4gY2FyZFRvRGVsZXRlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVMaWtlKGNhcmQpIHtcbiAgY2FyZElEID0gY2FyZC5nZXRJRCgpO1xuICBpZiAoY2FyZC5kYXRhLmlzTGlrZWQgPT0gZmFsc2UpIHtcbiAgICBhcGlcbiAgICAgIC5hZGRMaWtlKGNhcmRJRClcbiAgICAgIC50aGVuKChjYXJkLmRhdGEuaXNMaWtlZCA9IHRydWUpKVxuICAgICAgLnRoZW4oKCkgPT4gY2FyZC50b2dnbGVIZWFydCgpKVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYXBpXG4gICAgICAucmVtb3ZlTGlrZShjYXJkSUQpXG4gICAgICAudGhlbigoY2FyZC5kYXRhLmlzTGlrZWQgPSBmYWxzZSkpXG4gICAgICAudGhlbigoKSA9PiBjYXJkLnRvZ2dsZUhlYXJ0KCkpXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9KTtcbiAgfVxufVxuXG4vL0hhbmRsZSBlZGl0L2FkZCBidXR0b24gY2xpY2tzXG5cbm1vZGFsUHJvZmlsZUVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgcHJvZmlsZU1vZGFsLm9wZW4oKTtcbiAgY29uc3QgZGF0YSA9IG5ld1VzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gIGNvbnNvbGUubG9nKGRhdGEpO1xuICBtb2RhbE5hbWUudmFsdWUgPSBkYXRhLm5hbWU7XG4gIG1vZGFsSm9iLnZhbHVlID0gZGF0YS5qb2I7XG4gIGZvcm1WYWxpZGF0b3JzW1wiZWRpdFByb2ZpbGVcIl0ucmVzZXRWYWxpZGF0aW9uO1xufSk7XG5cbm5ld1Byb2ZpbGVJbWFnZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBuZXdQcm9maWxlUGljdHVyZU1vZGFsLm9wZW4oKTtcbn0pO1xuXG5tb2RhbEltYWdlRWRpdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBuZXdJbWFnZU1vZGFsLm9wZW4oKTtcbn0pO1xuXG4vL0Zvcm0gYW5kIFBpY3R1cmUgTW9kYWxzXG5cbmNvbnN0IHByb2ZpbGVNb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgcG9wdXBTZWxlY3RvcjogXCIubW9kYWxfdHlwZV9wcm9maWxlXCIsXG4gIGhhbmRsZUZvcm1TdWJtaXQ6IGZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0KGZvcm1EYXRhKSB7XG4gICAgZnVuY3Rpb24gbWFrZVJlcXVlc3QoKSB7XG4gICAgICByZXR1cm4gYXBpLmVkaXRVc2VySW5mbyhmb3JtRGF0YSkudGhlbigodXNlckRhdGEpID0+IHtcbiAgICAgICAgbmV3VXNlckluZm8uc2V0VXNlckluZm8oeyBuYW1lOiB1c2VyRGF0YS5uYW1lLCBqb2I6IHVzZXJEYXRhLmFib3V0IH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmRsZVN1Ym1pdChtYWtlUmVxdWVzdCwgcHJvZmlsZU1vZGFsKTtcbiAgfSxcbiAgYnV0dG9uVGV4dDogXCJTYXZlXCIsXG59KTtcblxuY29uc3QgbmV3UHJvZmlsZVBpY3R1cmVNb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgcG9wdXBTZWxlY3RvcjogXCIubW9kYWxfdHlwZV9jaGFuZ2UtcHJvZmlsZS1waWN0dXJlXCIsXG4gIGhhbmRsZUZvcm1TdWJtaXQ6IGZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVQaWN0dXJlU3VibWl0KGZvcm1EYXRhKSB7XG4gICAgZnVuY3Rpb24gbWFrZVJlcXVlc3QoKSB7XG4gICAgICByZXR1cm4gYXBpLmVkaXRVc2VyUHJvZmlsZVBpY3R1cmUoZm9ybURhdGEpLnRoZW4oKHVzZXJEYXRhKSA9PiB7XG4gICAgICAgIG5ld1VzZXJJbmZvLnNldFVzZXJQaWN0dXJlKHsgYXZhdGFyOiB1c2VyRGF0YS5hdmF0YXIgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaGFuZGxlU3VibWl0KG1ha2VSZXF1ZXN0LCBuZXdQcm9maWxlUGljdHVyZU1vZGFsKTtcbiAgfSxcbiAgYnV0dG9uVGV4dDogXCJTYXZlXCIsXG59KTtcblxuZnVuY3Rpb24gaGFuZGxlTmV3UGxhY2VTdWJtaXQoZm9ybURhdGEpIHtcbiAgZnVuY3Rpb24gbWFrZVJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIGFwaVxuICAgICAgLmFkZE5ld0NhcmQoZm9ybURhdGEpXG4gICAgICAudGhlbigoY2FyZERhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNhcmQoY2FyZERhdGEpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChhZGRlZENhcmQpID0+IGNhcmRBcmVhLmFkZEl0ZW0oYWRkZWRDYXJkKSlcbiAgICAgIC50aGVuKCgpID0+IG1vZGFsSW1hZ2VGb3JtLnJlc2V0KCkpXG4gICAgICAudGhlbigoKSA9PiBmb3JtVmFsaWRhdG9yc1tcIm5ld1BsYWNlXCJdLnRvZ2dsZUJ1dHRvblN0YXRlKCkpO1xuICB9XG4gIGhhbmRsZVN1Ym1pdChtYWtlUmVxdWVzdCwgbmV3SW1hZ2VNb2RhbCk7XG59XG5cbmNvbnN0IG5ld0ltYWdlTW9kYWwgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XG4gIHBvcHVwU2VsZWN0b3I6IFwiLm1vZGFsX3R5cGVfbmV3LWltYWdlXCIsXG4gIGhhbmRsZUZvcm1TdWJtaXQ6IGZ1bmN0aW9uIGhhbmRsZU5ld1BsYWNlU3VibWl0KGZvcm1EYXRhKSB7XG4gICAgZnVuY3Rpb24gbWFrZVJlcXVlc3QoKSB7XG4gICAgICByZXR1cm4gYXBpXG4gICAgICAgIC5hZGROZXdDYXJkKGZvcm1EYXRhKVxuICAgICAgICAudGhlbigoY2FyZERhdGEpID0+IHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ2FyZChjYXJkRGF0YSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChhZGRlZENhcmQpID0+IGNhcmRBcmVhLmFkZEl0ZW0oYWRkZWRDYXJkKSlcbiAgICAgICAgLnRoZW4oKCkgPT4gbW9kYWxJbWFnZUZvcm0ucmVzZXQoKSlcbiAgICAgICAgLnRoZW4oKCkgPT4gZm9ybVZhbGlkYXRvcnNbXCJuZXdQbGFjZVwiXS50b2dnbGVCdXR0b25TdGF0ZSgpKTtcbiAgICB9XG4gICAgaGFuZGxlU3VibWl0KG1ha2VSZXF1ZXN0LCBuZXdJbWFnZU1vZGFsKTtcbiAgfSxcbiAgYnV0dG9uVGV4dDogXCJDcmVhdGVcIixcbn0pO1xuXG5wcm9maWxlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbm5ld0ltYWdlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbm5ld1Byb2ZpbGVQaWN0dXJlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuZnVuY3Rpb24gb3Blbk1vZGFsSW1hZ2UoY2FyZCkge1xuICBjYXJkUG9wT3V0Lm9wZW4oY2FyZC5kYXRhLm5hbWUsIGNhcmQuZGF0YS5saW5rKTtcbn1cblxuLy9Vbml2ZXJzYWwgc3VibWl0IGhhbmRsZXJcblxuZnVuY3Rpb24gaGFuZGxlU3VibWl0KHJlcXVlc3QsIHBvcHVwSW5zdGFuY2UsIHNhdmluZ1RleHQgPSBcIlNhdmluZy4uLlwiKSB7XG4gIHBvcHVwSW5zdGFuY2UucmVuZGVyU2F2aW5nKHRydWUsIHNhdmluZ1RleHQpO1xuICByZXF1ZXN0KClcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBwb3B1cEluc3RhbmNlLmNsb3NlKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBwb3B1cEluc3RhbmNlLnJlbmRlclNhdmluZyhmYWxzZSk7XG4gICAgfSk7XG59XG5cbi8qIGVuYWJsZSBWYWxpZGF0aW9uICovXG5cbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XG5cbmNvbnN0IGVuYWJsZVZhbGlkYXRpb24gPSAodmFsaWRhdGlvbkNvbmZpZykgPT4ge1xuICBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh2YWxpZGF0aW9uQ29uZmlnLmZvcm1TZWxlY3RvcilcbiAgKTtcbiAgZm9ybUxpc3QuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uQ29uZmlnLCBmb3JtRWxlbWVudCk7XG4gICAgY29uc3QgZm9ybU5hbWUgPSBmb3JtRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgIGZvcm1WYWxpZGF0b3JzW2Zvcm1OYW1lXSA9IHZhbGlkYXRvcjtcbiAgICB2YWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuICB9KTtcbn07XG5cbmVuYWJsZVZhbGlkYXRpb24odmFsaWRhdGlvbkNvbmZpZyk7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICBjb25zdHJ1Y3Rvcih7IGFwaUFkZHJlc3MsIGFwaUhlYWRlcnMgfSkge1xuICAgIHRoaXMuX2FwaUFkZHJlc3MgPSBhcGlBZGRyZXNzO1xuICAgIHRoaXMuX2FwaUhlYWRlcnMgPSBhcGlIZWFkZXJzO1xuICB9XG5cbiAgX3NlcnZlclJlcXVlc3QodXJsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGZldGNoKHVybCwgb3B0aW9ucykudGhlbih0aGlzLnJlbmRlclJlc3VsdCk7XG4gIH1cblxuICByZW5kZXJSZXN1bHQocmVzKSB7XG4gICAgaWYgKHJlcy5vaykge1xuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcbiAgICB9XG4gIH1cblxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlclJlcXVlc3QoYCR7dGhpcy5fYXBpQWRkcmVzc30vY2FyZHNgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9hcGlIZWFkZXJzLFxuICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hVc2VySW5mbygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VydmVyUmVxdWVzdChgJHt0aGlzLl9hcGlBZGRyZXNzfS91c2Vycy9tZWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2FwaUhlYWRlcnMsXG4gICAgfSk7XG4gIH1cblxuICBlZGl0VXNlckluZm8obmV3VXNlcklucHV0KSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlclJlcXVlc3QoYCR7dGhpcy5fYXBpQWRkcmVzc30vdXNlcnMvbWVgLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2FwaUhlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWU6IG5ld1VzZXJJbnB1dC5uYW1lLFxuICAgICAgICBhYm91dDogbmV3VXNlcklucHV0LmpvYixcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgZWRpdFVzZXJQcm9maWxlUGljdHVyZShuZXdVc2VyTGluaykge1xuICAgIHJldHVybiB0aGlzLl9zZXJ2ZXJSZXF1ZXN0KGAke3RoaXMuX2FwaUFkZHJlc3N9L3VzZXJzL21lL2F2YXRhcmAsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5fYXBpSGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgYXZhdGFyOiBuZXdVc2VyTGluay5hdmF0YXIsXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIGFkZE5ld0NhcmQobmV3Q2FyZElucHV0KSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlclJlcXVlc3QoYCR7dGhpcy5fYXBpQWRkcmVzc30vY2FyZHNgLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5fYXBpSGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogbmV3Q2FyZElucHV0Lm5hbWUsXG4gICAgICAgIGxpbms6IG5ld0NhcmRJbnB1dC5saW5rLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgIHJldHVybiB0aGlzLl9zZXJ2ZXJSZXF1ZXN0KGAke3RoaXMuX2FwaUFkZHJlc3N9L2NhcmRzLyR7Y2FyZElkfWAsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2FwaUhlYWRlcnMsXG4gICAgfSk7XG4gIH1cblxuICBhZGRMaWtlKGNhcmRJZCkge1xuICAgIHJldHVybiB0aGlzLl9zZXJ2ZXJSZXF1ZXN0KGAke3RoaXMuX2FwaUFkZHJlc3N9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2FwaUhlYWRlcnMsXG4gICAgICAvKlxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBpc0xpa2VkOiB0cnVlIH0pLFxuICAgICAgKi9cbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZUxpa2UoY2FyZElkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlclJlcXVlc3QoYCR7dGhpcy5fYXBpQWRkcmVzc30vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczogdGhpcy5fYXBpSGVhZGVycyxcbiAgICAgIC8qXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGlzTGlrZWQ6IGZhbHNlIH0pLFxuICAgICAgKi9cbiAgICB9KTtcbiAgfVxuXG4gIGNoZWNrQ2FyZHNTdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlclJlcXVlc3QoYCR7dGhpcy5fYXBpQWRkcmVzc30vY2FyZHNgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9hcGlIZWFkZXJzLFxuICAgIH0pO1xuICB9XG5cbiAgbG9hZFBhZ2VSZXN1bHRzKCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5nZXRJbml0aWFsQ2FyZHMoKSwgdGhpcy5mZXRjaFVzZXJJbmZvKCldKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xuICBjb25zdHJ1Y3Rvcih7IHVzZXJOYW1lU2VsZWN0b3IsIHVzZXJKb2JTZWxlY3RvciwgcHJvZmlsZVBpY3R1cmVTZWxlY3RvciB9KSB7XG4gICAgdGhpcy5fdXNlck5hbWVTZWxlY3RvciA9IHVzZXJOYW1lU2VsZWN0b3I7XG4gICAgdGhpcy5fdXNlckpvYlNlbGVjdG9yID0gdXNlckpvYlNlbGVjdG9yO1xuICAgIHRoaXMuX3VzZXJOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VyTmFtZVNlbGVjdG9yKTtcbiAgICB0aGlzLl91c2VySm9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VySm9iU2VsZWN0b3IpO1xuICAgIHRoaXMuX3VzZXJQcm9maWxlUGljdHVyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJvZmlsZVBpY3R1cmVTZWxlY3Rvcik7XG4gIH1cblxuICBnZXRVc2VySW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQsXG4gICAgICBqb2I6IHRoaXMuX3VzZXJKb2IudGV4dENvbnRlbnQsXG4gICAgICAvKlxuICAgICAgYXZhdGFyOiB0aGlzLl91c2VyUHJvZmlsZVBpY3R1cmUuc3JjLFxuICAgICAgKi9cbiAgICB9O1xuICB9XG5cbiAgZ2V0VXNlclBpY3R1cmVMaW5rKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdmF0YXI6IHRoaXMuX3VzZXJQcm9maWxlUGljdHVyZS5zcmMsXG4gICAgfTtcbiAgfVxuXG4gIHNldFVzZXJJbmZvKGRhdGEpIHtcbiAgICB0aGlzLl91c2VyTmFtZS50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcbiAgICB0aGlzLl91c2VySm9iLnRleHRDb250ZW50ID0gZGF0YS5qb2I7XG4gICAgLypcbiAgICB0aGlzLl91c2VyUHJvZmlsZVBpY3R1cmUuc3JjID0gZGF0YS5hdmF0YXI7XG4gICAgKi9cbiAgfVxuXG4gIHNldFVzZXJQaWN0dXJlKGRhdGEpIHtcbiAgICB0aGlzLl91c2VyUHJvZmlsZVBpY3R1cmUuc3JjID0gZGF0YS5hdmF0YXI7XG4gIH1cbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yLCBpbWFnZVNlbGVjdG9yIH0pIHtcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XG4gICAgdGhpcy5fcG9wdXBNb2RhbEltYWdlID0gdGhpcy5fcG9wdXBNb2RhbC5xdWVyeVNlbGVjdG9yKGltYWdlU2VsZWN0b3IpO1xuICAgIHRoaXMuX3BvcHVwTW9kYWxDYXB0aW9uID0gdGhpcy5fcG9wdXBNb2RhbC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIuY2FyZF9fcG9wLW91dF9jYXB0aW9uXCJcbiAgICApO1xuICB9XG5cbiAgb3BlbihuYW1lLCBsaW5rKSB7XG4gICAgdGhpcy5fcG9wdXBNb2RhbEltYWdlLnNyYyA9IGxpbms7XG4gICAgdGhpcy5fcG9wdXBNb2RhbEltYWdlLmFsdCA9IG5hbWU7XG4gICAgdGhpcy5fcG9wdXBNb2RhbENhcHRpb24udGV4dENvbnRlbnQgPSBuYW1lO1xuICAgIHN1cGVyLm9wZW4oKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aERlbGV0ZSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yLCBoYW5kbGVCdG5DbGljaywgYnV0dG9uVGV4dCB9KSB7XG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX2J1dHRvblRleHQgPSBidXR0b25UZXh0O1xuICAgIHRoaXMuX2hhbmRsZUJ0bkNsaWNrID0gaGFuZGxlQnRuQ2xpY2s7XG4gICAgdGhpcy5fbW9kYWxGb3JtID0gdGhpcy5fcG9wdXBNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jb250YWluZXJcIik7XG4gICAgdGhpcy5fc3VibWl0QnRuID0gdGhpcy5fbW9kYWxGb3JtLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3NhdmUtYnV0dG9uXCIpO1xuICAgIHRoaXMuc3VibWl0QnRuVGV4dCA9IHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudDtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX3N1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnJlbmRlclNhdmluZyh0cnVlKTtcbiAgICAgIHRoaXMuX2hhbmRsZUJ0bkNsaWNrKCk7XG4gICAgfSk7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHJlbmRlclNhdmluZyhpc1NhdmluZywgc2F2aW5nVGV4dCA9IFwiRGVsZXRpbmcuLi5cIikge1xuICAgIGlmIChpc1NhdmluZykge1xuICAgICAgdGhpcy5fc3VibWl0QnRuVGV4dCA9IHNhdmluZ1RleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ0blRleHQgPSB0aGlzLl9idXR0b25UZXh0O1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIm8iLCJvYmoiLCJwcm9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicCIsImIiLCJkb2N1bWVudCIsImJhc2VVUkkiLCJzZWxmIiwibG9jYXRpb24iLCJocmVmIiwiVVJMIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIm1vZGFsUHJvZmlsZSIsInF1ZXJ5U2VsZWN0b3IiLCJtb2RhbFByb2ZpbGVFZGl0QnRuIiwibW9kYWxJbWFnZSIsIm1vZGFsSW1hZ2VFZGl0QnRuIiwibW9kYWxJbWFnZUZvcm0iLCJtb2RhbE5hbWUiLCJtb2RhbEpvYiIsIm5ld1Byb2ZpbGVJbWFnZUJ0biIsIkNhcmQiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlRGVsZXRlQnRuIiwiaGFuZGxlTGlrZUJ0biIsInRoaXMiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQnRuIiwiX2hhbmRsZUxpa2VCdG4iLCJfZ2V0VGVtcGxhdGUiLCJfY2FyZFRlbXBsYXRlIiwiY29udGVudCIsImNsb25lTm9kZSIsImdlbmVyYXRlQ2FyZCIsIl9jYXJkRWxlbWVudCIsIl9jYXJkSGVhcnQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJ0ZXh0Q29udGVudCIsIm5hbWUiLCJzcmMiLCJsaW5rIiwiYWx0IiwiaXNMaWtlZCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImdldElEIiwiX2lkIiwiY2FyZERlbGV0ZUJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b2dnbGVIZWFydCIsInRvZ2dsZSIsImRlbGV0ZUNhcmQiLCJjb25zb2xlIiwibG9nIiwiRm9ybVZhbGlkYXRvciIsInZhbGlkYXRpb25Db25maWciLCJmb3JtIiwiX3ZhbGlkYXRpb25Db25maWciLCJfZm9ybSIsIl9pbnB1dExpc3QiLCJpbnB1dFNlbGVjdG9yIiwiX2J1dHRvbkVsZW1lbnQiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9kaXNhYmxlQnV0dG9uIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImRpc2FibGVkIiwiX2VuYWJsZUJ1dHRvbiIsInRvZ2dsZUJ1dHRvblN0YXRlIiwiX2hhc0ludmFsaWRJbnB1dCIsImZvckVhY2giLCJpbnB1dEVsZW1lbnQiLCJfY2hlY2tJbnB1dFZhbGlkaXR5Iiwic29tZSIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGlkZUlucHV0RXJyb3IiLCJfc2hvd0lucHV0RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImVycm9yTWVzc2FnZSIsIl9lcnJvckVsZW1lbnQiLCJpZCIsImVycm9yTWVzc2FnZVNlbGVjdG9yU3VmZml4IiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsImZvcm1FbGVtZW50IiwicmVzZXRWYWxpZGF0aW9uIiwiZW5hYmxlVmFsaWRhdGlvbiIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiU2VjdGlvbiIsIl9yZWYiLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJpdGVtIiwiX2VsZW1lbnQiLCJhZGRJdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBNb2RhbCIsIl9wb3B1cE1vZGFsQ2xvc2VCdG4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwib3BlbiIsIl9hZGRFc2NFdmVudExpc3RlbmVyIiwiY2xvc2UiLCJfcmVtb3ZlRXNjRXZlbnRMaXN0ZW5lciIsImtleSIsIl9oYW5kbGVSZW1vdGVDbGljayIsInRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJzZXRFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsImJ1dHRvblRleHQiLCJzdXBlciIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2J1dHRvblRleHQiLCJfbW9kYWxGb3JtIiwiX21vZGFsSW5wdXRzIiwiX3N1Ym1pdEJ0biIsInN1Ym1pdEJ0blRleHQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJmb3JtVmFsdWVzIiwiaW5wdXQiLCJ2YWx1ZSIsImlucHV0VmFsdWVzIiwicmVuZGVyU2F2aW5nIiwiaXNTYXZpbmciLCJzYXZpbmdUZXh0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiX3N1Ym1pdEJ0blRleHQiLCJjYXJkVG9EZWxldGUiLCJjYXJkQXJlYSIsImNhcmRJRCIsImFwaSIsImFwaUFkZHJlc3MiLCJhcGlIZWFkZXJzIiwiX2FwaUFkZHJlc3MiLCJfYXBpSGVhZGVycyIsIl9zZXJ2ZXJSZXF1ZXN0IiwidXJsIiwib3B0aW9ucyIsImZldGNoIiwidGhlbiIsInJlbmRlclJlc3VsdCIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJnZXRJbml0aWFsQ2FyZHMiLCJoZWFkZXJzIiwiZmV0Y2hVc2VySW5mbyIsImVkaXRVc2VySW5mbyIsIm5ld1VzZXJJbnB1dCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWJvdXQiLCJqb2IiLCJlZGl0VXNlclByb2ZpbGVQaWN0dXJlIiwibmV3VXNlckxpbmsiLCJhdmF0YXIiLCJhZGROZXdDYXJkIiwibmV3Q2FyZElucHV0IiwiY2FyZElkIiwiYWRkTGlrZSIsInJlbW92ZUxpa2UiLCJjaGVja0NhcmRzU3RhdHVzIiwibG9hZFBhZ2VSZXN1bHRzIiwiYWxsIiwiYXV0aG9yaXphdGlvbiIsIm5ld1VzZXJJbmZvIiwidXNlck5hbWVTZWxlY3RvciIsInVzZXJKb2JTZWxlY3RvciIsInByb2ZpbGVQaWN0dXJlU2VsZWN0b3IiLCJfdXNlck5hbWVTZWxlY3RvciIsIl91c2VySm9iU2VsZWN0b3IiLCJfdXNlck5hbWUiLCJfdXNlckpvYiIsIl91c2VyUHJvZmlsZVBpY3R1cmUiLCJnZXRVc2VySW5mbyIsImdldFVzZXJQaWN0dXJlTGluayIsInNldFVzZXJJbmZvIiwic2V0VXNlclBpY3R1cmUiLCJjcmVhdGVDYXJkIiwib3Blbk1vZGFsSW1hZ2UiLCJoYW5kbGVEZWxldGVDbGljayIsImhhbmRsZUxpa2UiLCJjYXJkcyIsInVzZXJEYXRhIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsImNhcmRQb3BPdXQiLCJpbWFnZVNlbGVjdG9yIiwiX3BvcHVwTW9kYWxJbWFnZSIsIl9wb3B1cE1vZGFsQ2FwdGlvbiIsImRlbGV0ZUNhcmRNb2RhbCIsImhhbmRsZUJ0bkNsaWNrIiwiX2hhbmRsZUJ0bkNsaWNrIiwiZmluYWxseSIsImNhcmQiLCJwcm9maWxlTW9kYWwiLCJmb3JtVmFsaWRhdG9ycyIsIm5ld1Byb2ZpbGVQaWN0dXJlTW9kYWwiLCJuZXdJbWFnZU1vZGFsIiwiZm9ybURhdGEiLCJoYW5kbGVTdWJtaXQiLCJjYXJkRGF0YSIsImFkZGVkQ2FyZCIsInJlcXVlc3QiLCJwb3B1cEluc3RhbmNlIiwiZm9ybVNlbGVjdG9yIiwidmFsaWRhdG9yIiwiZm9ybU5hbWUiLCJnZXRBdHRyaWJ1dGUiXSwic291cmNlUm9vdCI6IiJ9